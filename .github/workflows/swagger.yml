openapi: 3.0.0

info:
  title: Consulting Project
  version: 0.0.1
  description: ""

servers:
  - url: "{protocol}://{domain}/api/{version}"
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      domain:
        enum:
          - 127.0.0.1:3000
          - staging.co.kr
          - production.co.kr
        default: 127.0.0.1:3000
      version:
        enum:
          - v1
          - v2
        default: v1

tags:
  - name: "user"
    description: "유저 관련"
  - name: "admin"
    description: "어드민 관련"
  - name: "doctor"
    description: "상담사관련"
  - name: "keyword"
    description: "키워드 관련"
  - name: "token"
    description: "토큰 관련"
  - name: "chat"
    description: "채팅 관련 / socket room "
  - name: "payment"
    description: "결제 / 거래내역 관련"
  - name: "schedule"
    description: "스케쥴링 관련"

security:
  - ApiKeyAuth: []

paths:
  /user:
    get:
      tags:
        - user
      summary: "유저 정보"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /user/detail/{user_id}:
    get:
      tags:
        - user
      summary: "특정 유저 상세정보"
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

    put:
      tags:
        - user
      summary: "유저 정보 수정"
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /user/create:
    post:
      tags:
        - user
      summary: "유저 회원가입"
      requestBody:
        content:
          application/json; charset:utf-8:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /user/login:
    post:
      tags:
        - user
      summary: "유저 로그인"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_login"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/200"
                  - type: object
                    properties:
                      result:
                        type: obejct
                        $ref: "#/components/schemas/LoginResponse"

  # /user/login/sns:
  #   post:
  #     tags:
  #     - user
  #     summary: '유저 SNS 로그인'
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'

  /user/logout:
    post:
      tags:
        - user
      summary: "유저 로그아웃"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  # /admin/list:
  #   get:
  #     tags:
  #     - admin
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'

  # /admin/user/list:
  #   get:
  #     tags:
  #     - admin
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'

  /doctor:
    get:
      tags:
        - doctor
      summary: "상담사 정보"
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/sizeparam"
        - $ref: "#/components/parameters/keywordParam"
        - $ref: "#/components/parameters/levelParam"
        - $ref: "#/components/parameters/genderParam"
        - $ref: "#/components/parameters/certificateParam"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /doctor/{doctor_id}:
    get:
      tags:
        - doctor
      summary: "특정 상담사 상세정보"
      parameters:
        - in: path
          name: doctor_id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

    put:
      tags:
        - doctor
      summary: "상담사 정보 수정"
      parameters:
        - in: path
          name: doctor_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/200"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /doctor/create:
    post:
      tags:
        - doctor
      summary: "상담사 회원가입"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/doctor"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /doctor/login:
    post:
      tags:
        - doctor
      summary: "상담사 로그아웃"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/200"
                  - type: object
                    properties:
                      result:
                        type: obejct
                        $ref: "#/components/schemas/LoginResponse"

  /doctor/logout:
    post:
      tags:
        - doctor
      summary: "상담사 로그아웃"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"
  /keywords:
    get:
      tags:
        - keyword
      summary: "키워드 정보"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  # /keyword/{user_id}:
  #   get:
  #     tags:
  #     - keyword
  #     summary: '키워드 정보'
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'

  /token/validate:
    post:
      tags:
        - token
      summary: "토큰 검증"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /token/refresh:
    post:
      tags:
        - token
      summary: "토큰 리프레쉬"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  # /review:
  #   get:
  #     tags:
  #     - review
  #     summary: '리뷰 검색'
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'

  #   post:
  #     tags:
  #     - review
  #     summary: '리뷰 등록'
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'

  # /review/{review_id}:
  #   get:
  #     tags:
  #     - review
  #     summary: '특정 리뷰 검색'
  #     parameters:
  #     - in: path
  #       name: review_id
  #       required: true
  #       schema:
  #         type: integer
  #     responses:
  #       200:
  #         description: 'success'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/200'
  /chat:
    post:
      tags:
        - chat
      description: 채팅 정보 입력
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /schedule/doctor/{doctor_id}:
    get:
      tags:
        - schedule
      parameters:
        - in: path
          name: doctor_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

  /schedule/create:
    post:
      tags:
        - schedule
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200"

components:
  schemas:
    user:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: True
        name:
          type: string
        phone:
          type: string
        gender:
          type: integer

    user_login:
      type: object
      properties:
        userid:
          type: string
        passowrd:
          type: string

    doctor:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: True
        name:
          type: string
        detail:
          type: object
          properties:
            introduce:
              type: string
              example: 소개글
            info:
              type: string
              example: 상담사 정보
            level:
              type: integer
              example: "1 (일반: 1, 전문: 2, 마스터: 3)"
            gender:
              type: integer
              example: "1 (남자: 1, 여자: 2)"
            certificate:
              type: integer
              example: "1 (1급: 1, 2급: 2)"

    keywords:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    200:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        result:
          type: object

  parameters:
    pageParam:
      in: query
      name: page
      description: 페이지
      schema:
        type: integer
        example: 1
      required: True

    sizeparam:
      in: query
      name: size
      description: 페이지 당 사이즈
      schema:
        type: integer
        example: 15
      required: True

    keywordParam:
      in: query
      name: keyword
      description: 키워드
      schema:
        type: string
        example: 강박

    levelParam:
      in: query
      name: level
      description: 상담사 레벨
      schema:
        type: integer
        example: 1

    genderParam:
      in: query
      name: gender
      description: 상담사 성별
      schema:
        type: integer
        example: 1

    certificateParam:
      in: query
      name: certificate
      description: 상담사 자격증
      schema:
        type: integer
        example: 1

  securitySchemes:
    ApiKeyAuth:
      in: header
      type: apiKey
      name: "x-api-key"
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
